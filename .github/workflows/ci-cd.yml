name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/project-bolt
      GRAFANA_URL: https://prometheus-prod-43-prod-ap-south-1.grafana.net/api/prom
      GRAFANA_JOB_NAME: surplus-food-app

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.IMAGE_NAME }}:latest

    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Check Kubernetes API availability
      id: k8s_check
      continue-on-error: true
      run: |
        kubectl version --short
        kubectl get nodes

    - name: Deploy Metrics Pusher (only if K8s is reachable)
      if: steps.k8s_check.outcome == 'success'
      run: |
        echo "✅ Kubernetes is reachable. Proceeding with deployment..."

        # Create Kubernetes secret for Grafana
        kubectl create secret generic grafana-creds \
          --from-literal=username=${{ secrets.GRAFANA_USERNAME }} \
          --from-literal=api-key=${{ secrets.GRAFANA_API_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -

        # Create Prometheus config ConfigMap
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: push-config
        data:
          prometheus.yml: |
            global:
              scrape_interval: 15s
              scrape_timeout: 10s
            scrape_configs:
              - job_name: '${{ env.GRAFANA_JOB_NAME }}'
                metrics_path: '/metrics'
                static_configs:
                  - targets: ['project-bolt-service.default.svc.cluster.local:80']
            remote_write:
              - url: '${{ env.GRAFANA_URL }}'
                basic_auth:
                  username: "\${GF_USERNAME}"
                  password: "\${GF_API_KEY}"
        EOF

        # Deploy Prometheus
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: metrics-pusher
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: metrics-pusher
          template:
            metadata:
              labels:
                app: metrics-pusher
            spec:
              containers:
              - name: prometheus
                image: prom/prometheus:v2.47.0
                args:
                  - "--config.file=/etc/prometheus/prometheus.yml"
                  - "--web.enable-remote-write-receiver"
                env:
                  - name: GF_USERNAME
                    valueFrom:
                      secretKeyRef:
                        name: grafana-creds
                        key: username
                  - name: GF_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: grafana-creds
                        key: api-key
                volumeMounts:
                  - name: config
                    mountPath: /etc/prometheus
              volumes:
                - name: config
                  configMap:
                    name: push-config
        EOF

    - name: Verify Metrics Pusher Deployment (only if K8s is reachable)
      if: steps.k8s_check.outcome == 'success'
      run: |
        kubectl rollout status deployment/metrics-pusher --timeout=90s || echo "Rollout failed"
        kubectl logs -l app=metrics-pusher --tail=50 || echo "No logs found"

    - name: Notify via AWS Lambda
      run: |
        METRICS_STATUS="unavailable"
        if kubectl get pods -l app=metrics-pusher >/dev/null 2>&1; then
          METRICS_STATUS=$(kubectl get pods -l app=metrics-pusher -o jsonpath='{.items[0].status.phase}')
        fi

        curl --fail -X POST "$LAMBDA_FUNCTION_URL" \
          -H "Content-Type: application/json" \
          -d '{
            "message": "✅ Docker image pushed to DockerHub: '${{ env.IMAGE_NAME }}:latest'",
            "metrics_status": "'"$METRICS_STATUS"'"
          }'
      env:
        LAMBDA_FUNCTION_URL: ${{ secrets.LAMBDA_FUNCTION_URL }}

    - name: Create dashboards folder
      run: mkdir -p dashboards

    - name: Download Grafana dashboards
      run: bash download-dashboards.sh

    - name: Commit downloaded dashboards to repo
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add dashboards/
        git commit -m "⬇️ Auto-update Grafana dashboards"
        git push || echo "Nothing to commit"
